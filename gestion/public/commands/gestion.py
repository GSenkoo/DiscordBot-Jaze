import discord
import json
import asyncio
import emoji
import random

from datetime import timedelta, datetime
from discord import AllowedMentions as AM
from discord.ext import commands
from utils.Tools import Tools
from utils.Searcher import Searcher
from utils.Paginator import PaginatorCreator

class Gestion(commands.Cog):
    def __init__(self, bot):
        self.bot = bot


    @commands.command(description = "Modifier la visiblit√©e/la permission d'envoi pour un salon", usage = "<lock/unlock/hide/unhide> [channel]")
    @commands.bot_has_permissions(manage_channels = True)
    @commands.guild_only()
    async def ch(self, ctx, action : str, channel : discord.ChannelType = None):
        if action.lower() not in ["lock", "unlock", "hide", "unhide"]:
            await ctx.send("> Merci de donner une action valide (lock/unlock/hide/unhide).")
            return
        
        if not channel:
            channel = ctx.channel
        overwrite = channel.overwrites_for(ctx.guild.default_role)

        if action.lower() in ["lock", "unlock"]:
            send_messages_perm = False if action.lower() == "lock" else True
            if overwrite.send_messages == send_messages_perm:
                await ctx.send(f"> Ce salon est d√©j√† **{action.lower()}**.")
                return
            overwrite.send_messages = send_messages_perm
        else:
            view_channel_perm = False if action.lower() == "hide" else True
            if overwrite.view_channel == view_channel_perm:
                await ctx.send(f"> Ce salon est d√©j√† **{action.lower()}**.")
                return
            overwrite.view_channel = view_channel_perm

        await channel.set_permissions(
            ctx.guild.default_role,
            reason = f"{action.lower()} de {ctx.author.display_name} ({ctx.author.id})",
            overwrite = overwrite
        )

        if ctx.channel != channel:
            await ctx.send(f"> Le salon {channel.mention} a √©t√© **{action.lower()}**.", delete_after = 10)
        await channel.send(f"> Le salon {channel.mention} a √©t√© **{action.lower()}** par {ctx.author.mention}.", allowed_mentions = discord.AllowedMentions().none())


    @commands.command(description = "Modifier la visiblit√©e/la permission d'envoi pour tous les salons", usage = "<lock/unlock/hide/unhide> [category]")
    @commands.bot_has_permissions(manage_channels = True, send_messages = True)
    @commands.guild_only()
    async def chall(self, ctx, action : str, category : discord.CategoryChannel = None):
        """
        Lorsque vous sp√©cifiez une cat√©gorie, **uniquements** les salons de celle-ci seront affect√©s.
        Sinon, **tous les salons** seront affect√©s.
        """
        if action.lower() not in ["lock", "unlock", "hide", "unhide"]:
            await ctx.send("> Merci de donner une action valide (lock/unlock/hide/unhide).")
            return

        if category: channels = category.channels
        else: channels = ctx.guild.channels

        msg = await ctx.send(f"> Action {action}all en cours...")

        if action.lower() in ["lock", "unlock"]: perms = {"send_messages": False if action.lower() == "lock" else True}
        else: perms = {"view_channel": False if action.lower() == "hide" else True}

        saves = []
        for channel in channels:
            channel_overwrites = channel.overwrites_for(ctx.guild.default_role)
            perm_to_def = list(perms.keys())[0]
            current_channel_perm_value = getattr(channel_overwrites, perm_to_def)
            perm_to_def_value = perms[perm_to_def]

            if current_channel_perm_value == perm_to_def_value:
                continue
        
            saves.append(channel.id)
            setattr(channel_overwrites, perm_to_def, perm_to_def_value)
            await channel.set_permissions(
                ctx.guild.default_role,
                overwrite = channel_overwrites,
                reason = f"{action.lower()} (pour tous les salons{'' if not category else f' de la cat√©gorie {category.name}'}) de {ctx.author.display_name} ({ctx.author.id})"
            )

            try: await channel.send(f"> Le salon {channel.mention} a √©t√© **{action.lower()}**.", delete_after = 10)
            except: pass

        class RestorePermissions(discord.ui.View):
            def __init__(self, permission_data):
                super().__init__(timeout = 600)
                self.permissions_data = permission_data

            async def on_timeout(self):
                try:
                    self.disable_all_items()
                    await self.message.edit(view = self)
                except: pass

            @discord.ui.button(
                label = "Restaurer les permissions",
                style = discord.ButtonStyle.danger,
                custom_id = "restore"
            )
            async def restore_permission(self, button, interaction):
                if (interaction.user != ctx.author) and (interaction.user != ctx.guild.owner):
                    await interaction.response.send_message(f"> Seul {interaction.user.mention} peut int√©ragir avec ceci (ou le propri√©taire du serveur).", ephemeral = True)
                    return
                
                button.disabled = True
                await interaction.response.defer()
                await interaction.message.edit("> Restauration des permissions en cours...", view = self)

                for channel in interaction.guild.channels:
                    if channel.id not in self.permissions_data:
                        continue
                    
                    channel_overwrites = channel.overwrites_for(interaction.guild.default_role)
                    setattr(channel_overwrites, perm_to_def, not perm_to_def_value)
                    await channel.set_permissions(
                        interaction.guild.default_role,
                        overwrite = channel_overwrites,
                        reason = f"Restauration de permission par {interaction.user.display_name} ({interaction.user.id})"
                    )
                try: await interaction.message.edit(f"> Restauration de {len(self.permissions_data)} salons termin√©s.", view = self)
                except: pass
        
        try:
            await msg.edit(
                f"> Tous les salons {'du serveur' if not category else f'de la cat√©gorie **{category.name}**'} ont √©t√©s **{action}**.\n\n"
                + "*Pour restorer les permissions, int√©ragissez avec le boutton ci-dessous dans les 10 minutes qui suivent.*",
                view = RestorePermissions(saves)
            )
        except:
            await ctx.send(
                f"> Tous les salons {'du serveur' if not category else f'de la cat√©gorie **{category.name}**'} ont √©t√©s **{action}**.\n\n"
                + "*Pour restorer les permissions, int√©ragissez avec le boutton ci-dessous dans les 10 minutes qui suivent.*",
                view = RestorePermissions(saves)
            )


    @commands.command(description = "Duppliquer un salon et ensuite supprimer le salon initial.")
    @commands.bot_has_guild_permissions(manage_channels = True)
    @commands.guild_only()
    async def renew(self, ctx, channel : discord.ChannelType = None):
        if not channel:
            channel = ctx.channel

        if channel == ctx.guild.rules_channel:
            await ctx.send("> Le salon des r√®gles ne peut pas √™tre supprim√©.")
            return
        if channel == ctx.guild.public_updates_channel:
            await ctx.send("> Le salon de mise √† jour de la communaut√© ne peut pas √™tre supprim√©.")
            return
        
        new_channel = await channel.clone(reason = f"[{ctx.author.display_name} | {ctx.author.id}] Demande de renew")
        await channel.delete()

        await new_channel.send(f"> Le salon a √©tait renew par {ctx.author.mention}.", allowed_mentions = AM.none(), delete_after = 10)
            

    @commands.command(description = "Configurer et ensuite lancer un giveaway")
    @commands.guild_only()
    async def giveaway(self, ctx):
        tools = Tools(self.bot)
        searcher = Searcher(self.bot, ctx)

        async def get_giveaway_embed(data) -> discord.Embed:
            embed = discord.Embed(
                title = "Giveaway",
                color = await self.bot.get_theme(ctx.guild.id)
            )

            embed.add_field(name = "R√©compense", value = data["reward"])
            embed.add_field(name = "Dur√©e", value = data["end_at"])
            embed.add_field(name = "Salon", value = f'<#{data["channel_id"]}>')
            embed.add_field(name = "Emoji", value = data["emoji"])
            embed.add_field(name = "Type d'int√©raction", value = data["interaction_type"].capitalize())
            embed.add_field(name = "Couleur (Bouton)", value = data["button_color"].capitalize())
            embed.add_field(name = "Texte (Button)", value = data["button_text"])
            embed.add_field(name = "Nombre de gagnants", value = str(data["winners_count"]))
            embed.add_field(name = "Gagnant impos√©", value = f"<@{data['imposed_winner']}>" if data["imposed_winner"] else "*Aucun gagnant impos√©*")
            embed.add_field(name = "R√¥le requis", value = f"<@&{data['required_role']}>" if data["required_role"] else "*Aucun r√¥le*")
            embed.add_field(name = "R√¥le interdit", value = f"<@&{data['prohibited_role']}>" if data["prohibited_role"] else "*Aucun r√¥le*")
            embed.add_field(name = "Imposer la pr√©sence en vocal", value = "Oui" if data["in_vocal_required"] else "Non")

            return embed


        giveaway_data = {
            "reward": "Exemple de r√©compense",
            "end_at": "2h",
            "channel_id": ctx.channel.id,
            "emoji": "üéâ",
            "interaction_type": "button",
            "button_color": "grey", # blue, green, gray or red
            "button_text": "Participer",
            "winners_count": 1,
            "imposed_winner": 0,
            "required_role": 0,
            "prohibited_role": 0,
            "in_vocal_required": False
        }

        bot = self.bot
        class ManageGiveaway(discord.ui.View):
            def __init__(self, giveaway_data : dict):
                super().__init__(timeout = 180)
                self.giveaway_data = giveaway_data

            async def on_timeout(self) -> None:
                try: await self.message.edit(view = None)
                except: pass

            @discord.ui.select(
                placeholder = "Modifier une valeur",
                options = [
                    discord.SelectOption(label = "R√©compense", value = "reward", emoji = "üéÅ"),
                    discord.SelectOption(label = "Dur√©e", value = "end_at", emoji = "‚è±Ô∏è"),
                    discord.SelectOption(label = "Salon", value = "channel", emoji = "üè∑"),
                    discord.SelectOption(label = "Emoji", value = "emoji", emoji = "‚ö™"),
                    discord.SelectOption(label = "Type d'int√©raction", value = "interaction_type", emoji = "üí•"),
                    discord.SelectOption(label = "Couleur (Bouton)", value = "button_color", emoji = "üé®"),
                    discord.SelectOption(label = "Texte (Bouton)", value = "button_text", emoji = "üìù"),
                    discord.SelectOption(label = "Nombre de gagnant", value = "winners_count", emoji = "üë•"),
                    discord.SelectOption(label = "Gagnant impos√©", value = "imposed_winner", emoji = "üë§"),
                    discord.SelectOption(label = "R√¥le requis", value = "required_role", emoji = "‚õì"),
                    discord.SelectOption(label = "R√¥le interdit", value = "prohibited_role", emoji = "üö´"),
                    discord.SelectOption(label = "Imposition de la pr√©sence en vocal", value = "in_vocal_required", emoji = "üîä"),
                    discord.SelectOption(label = "Retirer une option", value = "remove_option", emoji = "‚ùå")
                ]
            )
            async def edit_giveaway_select_callback(self, select, interaction):
                if interaction.user != ctx.author:
                    await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                    return
                
                async def delete_message(message):
                    try: await message.delete()
                    except: pass

                async def get_emoji(query):
                    if emoji.is_emoji(query):
                        return query
                    
                    query = query.split(":")
                    if len(query) != 3:
                        return None
                    
                    query = query[2].replace(">", "")
                    try: query = bot.get_emoji(int(query))
                    except Exception as e:
                        print(e)
                        return None
                    return query

                async def get_option_name(option_id):
                    for option in select.options:
                        if option.value == option_id:
                            return option.label
                    return None
                
                def check_message_validity(message):
                    return (message.channel == ctx.channel) and (message.author == ctx.author) and (message.content)
                
                await interaction.response.defer()

                # ----------------------------- Obtention d'une r√©ponse
                notes = {
                    "end_at": "Voici quelques exemple de temps valides : `1jours`, `3d`, `4h` , `5minutes`. Maximum 30 jours.",
                    "interaction_type": "Types d'int√©ractions disponibles : `bouton` et `r√©action`",
                    "button_color": "Couleurs disponibles : `bleu`, `rouge`, `vert` et `gris`",
                    "in_vocal_required": "R√©ponses possibles : `oui` et `non`",
                    "remove_option": "Les options qui peuvent √™tre retir√© sont : `gagnant impos√©`, `r√¥le requis` et `r√¥le interdit`"
                }

                ask_message = await ctx.send(
                    f"> Quel(le) **{await get_option_name(select.values[0])}** souhaitez-vous d√©finir √† votre giveaway? Envoyez `cancel` pour annuler."
                    + (f"\n{notes[select.values[0]]}" if select.values[0] in list(notes.keys()) else "")
                )

                try: response_message = await bot.wait_for("message", timeout = 60, check = check_message_validity)
                except asyncio.TimeoutError:
                    await ctx.send("> Action annul√©e, 1 minute √©coul√©e.", delete_after = 2)
                    return
                finally: await delete_message(ask_message)
                await delete_message(response_message)

                if response_message.content.lower() == "cancel":
                    await ctx.send("> Action annul√©e.", delete_after = 2)
                    return


                # ----------------------------- S'occuper de la valeur
                if select.values[0] == "reward":
                    if len(response_message.content) > 100:
                        await ctx.send("> Action annul√©e, votre nom de r√©compense est trop long (plus de 100 caract√®res).", delete_after = 2)
                        return
                    
                    self.giveaway_data["reward"] = response_message.content

                if select.values[0] == "end_at":
                    time = await tools.find_duration(response_message.content)

                    if not time:
                        await ctx.send("> Action annul√©e, dur√©e invalide.", delete_after = 2)
                        return
                    if time > timedelta(days = 30):
                        await ctx.send("> Action annul√©e, dur√©e trop longue. Vous ne pouvez pas d√©finir une dur√©e supp√©rieure √† 30 jours.", delete_after = 2)
                        return
                    
                    self.giveaway_data["end_at"] = response_message.content

                if select.values[0] == "channel":
                    channel = await searcher.search_channel(response_message.content)

                    if not channel:
                        await ctx.send("> Action annul√©e, salon invalide.", delete_after = 2)
                        return
                    
                    self.giveaway_data["channel_id"] = channel.id

                if select.values[0] == "emoji":
                    found_emoji = await get_emoji(response_message.content)

                    if not found_emoji:
                        await ctx.send("> Emoji invalide, merci de donner un emoji valide.", delete_after = 2)
                        return
                    
                    self.giveaway_data["emoji"] = found_emoji

                if select.values[0] == "interaction_type":
                    if response_message.content.lower() in ["button", "buttons", "bouton", "boutons"]: new_def = "button"
                    elif response_message.content.lower() in ["reaction", "reactions", "r√©action", "r√©actions"]: new_def = "reaction"
                    else:
                        await ctx.send("> Action annul√©e, type d'int√©raction invalide.", delete_after = 2)
                        return
                    
                    if self.giveaway_data["interaction_type"] == new_def:
                        await ctx.send("> Action annul√©e, cette valeur est d√©j√† d√©finie.", delete_after = 2)
                        return
                    
                    self.giveaway_data["interaction_type"] = new_def

                if select.values[0] == "button_color":
                    if response_message.content.lower() in ["blue", "bleu"]: self.giveaway_data["button_color"] = "blue"
                    elif response_message.content.lower() in ["green", "vert"]: self.giveaway_data["button_color"] = "green"
                    elif response_message.content.lower() in ["red", "rouge"]: self.giveaway_data["button_color"] = "red"
                    elif response_message.content.lower() in ["gray", "gris"]: self.giveaway_data["button_color"] = "grey"
                    else:
                        await ctx.send("> Action annul√©e, couleur invalide.", delete_after = 2)
                        return

                if select.values[0] == "button_text":
                    if len(response_message.content) > 80:
                        await ctx.send("> Action annul√©e, vous ne pouvez pas d√©finir un texte de bouton de plus de 80 caract√®res.", delete_after = 2)
                        return
                    
                    self.giveaway_data["button_text"] = response_message.content

                if select.values[0] == "winners_count":
                    if not response_message.content.isdigit():
                        await ctx.send("> Action annul√©e, vous n'avez pas donner de nombre valide.", delete_after = 2)
                        return
                    if not 1 <= int(response_message.content) <= 50:
                        await ctx.send("> Action annul√©e, votre nombre de gagnant doit √™tre entre 1 et 50.", delete_after = 2)
                        return
                    if self.giveaway_data["imposed_winner"]:
                        await ctx.send("> Action annul√©e, votre nombre de gagnant doit forc√©ment √™tre d√©finis √† 1 si vous pr√©d√©finissez un gagnant.", delete_after = 2)
                        return
                    
                    self.giveaway_data["winners_count"] = int(response_message.content)

                if select.values[0] == "imposed_winner":
                    user = await searcher.search_user(response_message.content)
                    if not user:
                        await ctx.send("> Action annul√©e, utilisateur invalide.", delete_after = 2)
                        return

                    self.giveaway_data["imposed_winner"] = user.id
                    self.giveaway_data["winners_count"] = 1

                if select.values[0] in ["required_role", "prohibited_role"]:
                    role = await searcher.search_role(response_message.content)
                    if not role:
                        await ctx.send("> Action annul√©e, r√¥le invalide.", delete_after = 2)
                        return
                    
                    previous_value = self.giveaway_data[select.values[0]]
                    self.giveaway_data[select.values[0]] = role.id

                    if self.giveaway_data["required_role"] == self.giveaway_data["prohibited_role"]:
                        self.giveaway_data[select.values[0]] = previous_value
                        await ctx.send("> Action annul√©e, le r√¥le requis et le r√¥le obligatoire ne peuvent pas √™tre identiques.", delete_after = 2)
                        return

                if select.values[0] == "in_vocal_required":
                    if response_message.content.lower() in ["true", "yes", "oui", "o"]: new_def = True
                    elif response_message.content.lower() in ["false", "no", "non", "n"]: new_def = False
                    else:
                        await ctx.send("> Action annul√©e, r√©ponse invalide.", delete_after = 2)
                        return
                    
                    self.giveaway_data["in_vocal_required"] = new_def                 

                if select.values[0] == "remove_option":
                    if response_message.content.lower() in ["r√¥le requis", "role requis", "r√¥le requi", "role requi", "required roles", "required role"]:
                        self.giveaway_data["required_role"] = None
                    elif response_message.content.lower() in ["r√¥le interdit", "role interdit", "r√¥le interdits", "r√¥le interdit", "prohibited role", "prohibited roles"]:
                        self.giveaway_data["prohibited_role"] = None
                    elif response_message.content.lower() in ["gagnant impos√©", "gagnant impose", "gagnants impos√©", "gagnants impose", "imposed winner", "imposed winners"]:
                        self.giveaway_data["imposed_winner"] = None
                    else:
                        await ctx.send("> Action annul√©e, r√©ponse invalide.", delete_after = 2)
                        return


                # ----------------------------- Mettre √† jours le message de giveaway
                await interaction.message.edit(embed = await get_giveaway_embed(self.giveaway_data))

            
            @discord.ui.button(label = "Envoyer", emoji = "‚úÖ")
            async def send_giveaway_button_callback(self, button, interaction):
                if interaction.user != ctx.author:
                    await ctx.send("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                    return

                time = await tools.find_duration(giveaway_data["end_at"]) + datetime.now()
                giveaway_embed = discord.Embed(
                    title = f"Giveaway: {giveaway_data['reward']}",
                    color = await bot.get_theme(interaction.guild.id),
                    description = f"*Int√©ragissez avec {giveaway_data['emoji']} pour participer.*\nNombre de gagnants : {giveaway_data['winners_count']}",
                ).add_field(
                    name = "Fin du giveaway",
                    value = f"<t:{round(time.timestamp())}:R>"
                )

                if giveaway_data["interaction_type"] == "button":
                    giveaway_embed.set_footer(text = "0 participants")
                
                class GiveawayButton(discord.ui.View):
                    @discord.ui.button(label = giveaway_data["button_text"], custom_id = "giveaway", emoji = giveaway_data["emoji"], style = getattr(discord.ButtonStyle, giveaway_data["button_color"].replace("blue", "blurple")))
                    async def callback(self, button, interaction):
                        pass
                
                channel : discord.Channel = await interaction.guild.fetch_channel(giveaway_data["channel_id"])
                message : discord.Message = await channel.send(embed = giveaway_embed, view = GiveawayButton(timeout = None) if giveaway_data["interaction_type"] == "button" else None)

                if giveaway_data["interaction_type"] == "reaction":
                    await message.add_reaction(giveaway_data["emoji"])

                for data, value in giveaway_data.items():
                    if data == "channel_id":
                        continue
                    if data == "end_at":
                        value = datetime.now() + await tools.find_duration(value)
                        value = value.strftime("%Y-%m-%d %H:%M:%S")
                    await bot.db.set_data("giveaway", data, value, guild_id = ctx.guild.id, channel_id = channel.id, message_id = message.id)
                await bot.db.set_data("giveaway", "participations", json.dumps([]), guild_id = ctx.guild.id, channel_id = channel.id, message_id = message.id)
                await interaction.response.send_message(f"> Votre giveaway **{self.giveaway_data['reward']}** a bien √©t√© envoy√© dans le salon <#{self.giveaway_data['channel_id']}>.", ephemeral = True)
        
        await ctx.send(view = ManageGiveaway(giveaway_data), embed = await get_giveaway_embed(giveaway_data))


    @commands.command(description = "Reroll un giveaway toujours actif", usage = "<message>")
    @commands.guild_only()
    async def reroll(self, ctx, giveaway_message : discord.Message):
        giveaway_data = await self.bot.db.execute(f"SELECT * FROM giveaway WHERE guild_id = {ctx.guild.id} AND message_id = {giveaway_message.id}", fetch = True)

        if not giveaway_data:
            await ctx.send(f"> Aucun giveaway actif **dans ce salon** ne poss√®de l'identifiant `{giveaway_message.id}`, si vous souhaitez reroll un giveaway depuis un salon diff√©rent de celui du giveaway, donnez le lien du message.")
            return
        
        giveaway_table_columns = await self.bot.db.get_table_columns("giveaway")
        giveaway = dict(set(zip(giveaway_table_columns, giveaway_data[0])))
        giveaway_link = f"[giveaway {giveaway['reward']}](https://discord.com/channels/{giveaway['guild_id']}/{giveaway['channel_id']}/{giveaway['message_id']})"

        if not giveaway["ended"]:
            await ctx.send(f"> Le {giveaway_link} n'est pas encore termin√©.")
            return
        
        if giveaway["channel_id"] != ctx.channel:
            channel = ctx.guild.get_channel(giveaway["channel_id"])
            if not channel:
                await ctx.send(f"> Le salon du {giveaway_link} n'existe plus ou je ne peux pas y acc√©der.")
                return
        else: channel = ctx.channel

        try:
            message = self.bot.get_message(giveaway["message_id"])
            if not message:
                message = await channel.fetch_message(giveaway["message_id"])
        except:
            await ctx.send(f"> Le message du {giveaway_link} n'existe plus ou je ne peux pas y acc√©der.")
            return
        
        participants = json.loads(giveaway["participations"])
        if (giveaway["winners_count"] == 1) or (giveaway["imposed_winner"]) or (len(participants) == 1):
            await message.reply(f"> Giveaway reroll, le gagnant du giveaway **{giveaway['reward']}** est <@" + str(random.choice(participants) if not giveaway["imposed_winner"] else giveaway["imposed_winner"]) + ">")
        else:
            if len(participants) <= giveaway["winners_count"]:
                winners = [f"<@{user}>" for user in participants]
            else:
                winners = []
                for i in range(giveaway["winners_count"]):
                    winner = random.choice(participants)
                    winners.append(f"<@{winner}>")
                    participants.remove(winner)
            

            await message.reply(f"> Giveaway reroll, les gagnants du giveaway **{giveaway['reward']}** sont : " + ", ".join(winners[:-1]) + " et " + winners[-1])
        if message.channel != ctx.channel:
            await ctx.send(f"> Le giveaway **{giveaway['reward']}** a √©t√© reroll dans le salon {channel.mention}.")


    @commands.command(description = "Voir les giveaways actuellements actifs sur le serveur")
    @commands.guild_only()
    async def giveaways(self, ctx):
        paginator_creator = PaginatorCreator()
        giveaways = await self.bot.db.execute(f"SELECT * FROM giveaway WHERE guild_id = {ctx.guild.id} ORDER BY end_at DESC", fetch = True)

        if not giveaways:
            await ctx.send("> Il n'y a aucun giveaways actifs sur ce serveur.")
            return
        
        giveaways_columns = await self.bot.db.get_table_columns("giveaway")
        giveaways = [dict(set(zip(giveaways_columns, giveaway_data))) for giveaway_data in giveaways]
        giveaways_text_data = []

        for giveaway in giveaways:
            giveaway_link = f"[Giveaway {giveaway['reward']}](https://discord.com/channels/{giveaway['guild_id']}/{giveaway['channel_id']}/{giveaway['message_id']}) ({'Se termine' if giveaway['end_at'] > datetime.now() else 'Termin√©'} <t:{round(giveaway['end_at'].timestamp())}:R>)"
            giveaways_text_data.append(giveaway_link)
        
        paginator = await paginator_creator.create_paginator(
            title = "Giveaways actifs",
            embed_color = await self.bot.get_theme(ctx.guild.id),
            data_list = giveaways_text_data,
            comment = "*Les donn√©es d'un giveaway restent accessibles jusqu'√† 3h apr√®s sa fin.\nDonc vous pouvez le reroll uniquements durant ce d√©lai.*"
        )

        if type(paginator) == list: await ctx.send(embed = paginator[0])
        else: await paginator.send(ctx)



def setup(bot):
    bot.add_cog(Gestion(bot))