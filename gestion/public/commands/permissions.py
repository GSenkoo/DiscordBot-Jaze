import discord
import textwrap
import json
from datetime import datetime
from discord.ext import commands
from utils.PermissionsManager import PermissionsManager
from utils.Paginator import PaginatorCreator
from utils.Database import Database


class MyViewClass(discord.ui.View):
    async def on_timeout(self):
        if self.to_components != self.message.components:
            return
        if self.message:
            try: await self.message.edit(view = None)
            except: pass


# ------------------ Les permissions qui peuvent √™tre utilis√©s pour les "permissions autoris√©es"
guildpermissions = [
    "administrator",
    "kick_members",
    "ban_members",
    "manage_channels",
    "manage_guild",
    "view_audit_log",
    "manage_messages",
    "mention_everyone",
    "manage_roles",
    "manage_webhooks",
    "manage_emojis_and_stickers",
    "manage_threads",
    "moderate_members"
]


# ------------------ Les noms des permissions 0, 10 et 11
custom_names = {
    "0": "Public",
    "10": "Owner",
    "11": "Propri√©ataire"
}

class Gestion_des_Permissions(commands.Cog):
    def __init__(self, bot):
        self.bot = bot


    @commands.command(description = "Lire le guide de configuration des permissions.", aliases = ["gp"])
    @commands.guild_only()
    async def guideperms(self, ctx):
        bot = self.bot

        class PermGuideMenu(MyViewClass):
            async def on_timeout(self):
                try: await self.message.edit(view = None)
                except: pass

            @discord.ui.select(
                placeholder = "Choisir un guide",
                options = [
                    discord.SelectOption(label = "1. Permissions hi√©rarchiques et personnalis√©es [1]", value = "perms_hp"),
                    discord.SelectOption(label = "1. Permissions hi√©rarchiques et personnalis√©es [2]", value = "perms_hp2"),
                    discord.SelectOption(label = "2. Comprendre vos configurations", value = "understand_config"),
                    discord.SelectOption(label = "3. G√©rer les commandes de vos permissions", value = "config_commands"),
                    discord.SelectOption(label = "4. G√©rer les autorisations de vos permissions", value = "manage_perms_of_perms"),
                    discord.SelectOption(label = "5. Les limites de configurations", value = "config_limit")
                ]
            )
            async def select_callback(self, select, interaction):
                if interaction.user != ctx.author:
                    await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                    return
                
                await interaction.response.defer()

                for option in select.options:
                    option.default = option.value == select.values[0]

                if select.values[0] == "perms_hp":
                    await interaction.message.edit(
                        embed = discord.Embed(
                            color = await bot.get_theme(ctx.guild.id),
                            description = textwrap.dedent("""
                                ## Diff√©rences th√©oriques
                                La diff√©rence principale entre les permissions hi√©rarchiques et les permissions personnalis√©es est que les permissions hi√©rarchiques sont tri√©es par hi√©rarchie (comme son nom l'indique). Cela signifie que chaque permission a acc√®s √† toutes les commandes des permissions inf√©rieures (en plus des siennes).

                                En plus de cette diff√©rence, vous devrez √©galement noter que les permissions hi√©rarchiques sont not√©es par des nombres de 1 √† 9 repr√©sentant leur niveau dans la hi√©rarchie des permissions hi√©rarchiques.

                                ## Diff√©rences pratiques
                                La distinction entre ces deux types de permissions peut encore sembler assez floue. Voici donc un exemple concret :

                                *"Thomas souhaite faire en sorte que les @mod√©rateurs de son serveur aient acc√®s √† une certaine commande `+warn`. Il a d√©j√† configur√© ses param√®tres de telle sorte que les mod√©rateurs aient acc√®s √† la permission 2.*
                                *Mais Thomas veut aussi que tous les r√¥les avec une permission hi√©rarchique sup√©rieure aient acc√®s √† cette commande. Comment faire ?"*

                                > Dans un premier temps, il serait stupide de cr√©er des permissions personnalis√©es pour chaque r√¥le, cela prendrait un temps fou et la gestion serait plus difficile.
                                > Pour r√©soudre ce probl√®me, Thomas n'aura qu'√† configurer ses permissions de telle sorte que les r√¥les sup√©rieurs √† @mod√©rateurs aient acc√®s √† une permission sup√©rieure √† la permission 2, et c'est fini.
                            """)
                        ),
                        view = self
                    )
                if select.values == "perms_hp2":
                    await interaction.message.edit(
                        embed = discord.Embed(
                            color = await bot.get_theme(ctx.guild.id),
                            description = textwrap.dedent()
                        )
                    )

        current_date = datetime.now()
        await ctx.send(
            embed = discord.Embed(
                title = "Guide de configuration de vos permissions",
                description = textwrap.dedent(f"""
                {'Bonjour' if current_date.hour > 6 and current_date.hour < 20 else 'Bonsoir'} **{ctx.author.display_name}**, ce guide vous permettra de configurer facilement vos permissions. En suivant celui-ci du d√©but √† la fin, vous serez au final capable de :
                
                1. *Voir la diff√©rence permissions hi√©rarchiques et personnalis√©es.*
                2. *Comprendre la v√©rification des permissions par le bot.*
                3. *Cr√©er ou modifier vos permissions avec aisance.*

                Vous pouvez √©galement vous fier √† votre intuition si vous √™tes d√©j√† familier avec ce type de configuration. En cas de probl√®me de compr√©hension, vous pouvez toujours contacter et demander de l'aide √† notre support.
                """),
                color = await self.bot.get_theme(ctx.guild.id)
            ),
            view = PermGuideMenu()
        )

    
    @commands.command(description = "Voir et configurer les autorisations des permissions hi√©rarchiques")
    @commands.guild_only()
    async def perms(self, ctx):
        bot = self.bot

        async def get_main_embed():
            db = Database()
            await db.connect()
            permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = ctx.guild.id))
            await db.disconnect()

            perms = {str(k):0 for k in range(12)}
            for name, perm in permissions_data["commands"].items():
                perms[perm] += 1
            perms = [" - **" + custom_names.get(perm, f"Perm{perm}") + "**" + f" ({cmds_count})" for perm, cmds_count in perms.items() if cmds_count != 0]
            embed = discord.Embed(
                title = "Permissions hi√©rarchiques",
                color = await self.bot.get_theme(ctx.guild.id),
                description = textwrap.dedent(f"""
                    *Vous pouvez voir et modifier vos permsisions via le menu ci-dessous*
                    *Pour voir les commandes par permissions, utilisez la commande `{await self.bot.get_prefix(ctx.message)}helpall`.*

                    - **__Permissions poss√©dants des commandes__**
                """) + '\n'.join(perms)
            )

            return embed

        class ConfigPerms(MyViewClass):
            @discord.ui.select(
                placeholder = "Choisir une permission",
                options = [
                    discord.SelectOption(label = f"Perm{i}", emoji = "üóù", value = str(i)) for i in range(12) if not custom_names.get(str(i), None)
                ]
            )
            async def select_callback(self, select, interaction):
                if interaction.user != ctx.author:
                    await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                    return
                
                choose_permission_view = self
                original_permission = select.values[0]

                async def get_permission_embed():
                    db = Database()
                    await db.connect()
                    permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = ctx.guild.id))
                    await db.disconnect()

                    guildpermissions_translations = await bot.get_translation("permissions", interaction.guild.id)
                    perm_authorzation_data = permissions_data["authorizations"][select.values[0]]
                    perm_commands = [command for command, permission in permissions_data["commands"].items() if permission == select.values[0]]

                    embed = discord.Embed(
                        title = custom_names.get(select.values[0], f"Permission n¬∞{select.values[0]}"),
                        color = await bot.get_theme(ctx.guild.id),
                        description = textwrap.dedent(f"""
                            *Chaque r√¥le, utilisateur ou permission de serveur doit appartenir √† une seule permission hi√©rarchique. Ainsi, si vous ajoutez un √©l√©ment d√©j√† pr√©sent dans une autre permission hi√©rarchique, il sera automatiquement retir√© de cette derni√®re.*
                            ### Informations sur la permission
                            *Commandes* : **{len(perm_commands)}**
                            *R√¥les* : **{len(perm_authorzation_data['roles'])}/15**
                            *Utilisateur sp√©cifiques* : **{len(perm_authorzation_data['users'])}/15**
                            *Permissions de serveur* : **{len(perm_authorzation_data['guildpermissions'])}/15**
                        """),

                    ).add_field(
                        name = "R√¥les autoris√©s",
                        value = "\n".join([f"<@&{role_id}>" for role_id in perm_authorzation_data["roles"]]) if perm_authorzation_data["roles"] else "*Aucun r√¥le*"
                    ).add_field(
                        name ="Utilisateurs autoris√©s",
                        value = "\n".join([f"<@{user_id}>" for user_id in perm_authorzation_data["users"]]) if perm_authorzation_data["users"] else "*Aucun utilisateur*"
                    ).add_field(
                        name = "Permissions autoris√©s",
                        value = "\n".join([guildpermissions_translations[p] for p in perm_authorzation_data["guildpermissions"]]) if perm_authorzation_data["guildpermissions"] else "*Aucune permission autoris√©*"
                    )

                    return embed
                
                class EditPerm(MyViewClass):
                    @discord.ui.select(
                        placeholder = "Modifier le la permission",
                        options = [
                            discord.SelectOption(label = "Ajouter des r√¥les", emoji = "üé≠", value = "add_roles"),
                            discord.SelectOption(label = "Retirer des r√¥les", emoji = "üé≠", value = "remove_roles"),
                            discord.SelectOption(label = "Ajouter des utilisateurs", emoji = "üë•", value = "add_users"),
                            discord.SelectOption(label = "Retirer des utilisateurs", emoji = "üë•", value = "remove_users"),
                            discord.SelectOption(label = "G√©rer les permissions", emoji = "üóù", value = "manage_guildpermissions")
                        ],
                        custom_id = "edit_perm"
                    )
                    async def select_callback(self, select, interaction):
                        if interaction.user != ctx.author:
                            await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                            return

                        db = Database()
                        await db.connect()
                        permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                        permission_data = permissions_data["authorizations"][original_permission]
                        await db.disconnect()

                        previous_view = self
                        if select.values[0] == "add_roles":
                            if len(permission_data["roles"]) >= 15:
                                await interaction.response.send_message("> Vous ne pouvez pas ajouter plus de 15 r√¥les autoris√©s.", ephemeral = True)
                                return
                            
                            await interaction.response.defer()
                            
                            class AddRole(MyViewClass):
                                @discord.ui.select(
                                    placeholder = "Choisir des r√¥les",
                                    select_type = discord.ComponentType.role_select,
                                    max_values = 15 - len(permission_data["roles"])
                                )
                                async def add_role_callback(self, select, interaction):
                                    if interaction.user != ctx.author:
                                        await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                        return
                                    
                                    db = Database()
                                    await db.connect()

                                    permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                                    permission_data = permissions_data["authorizations"][original_permission]

                                    for role in select.values:
                                        if (role.id in permission_data["roles"]) or (len(permission_data["roles"]) >= 15):
                                            continue
                                        for perm, perm_data in permissions_data["authorizations"].items(): # Faire en sorte √† ce que le r√¥le ne soit nul par ailleurs.
                                            if role.id in perm_data["roles"]:
                                                permissions_data["authorizations"][perm]["roles"].remove(role.id)
                                        permission_data["roles"].append(role.id)

                                    permissions_data["authorizations"][original_permission] = permission_data
                                    await db.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id = interaction.guild.id)
                                    await interaction.response.defer()
                                    await interaction.message.edit(embed = await get_permission_embed(), view = previous_view)

                                    await db.disconnect()


                                @discord.ui.button(label = "Choisissez des r√¥les √† ajouter", row = 1, style = discord.ButtonStyle.primary, disabled = True)
                                async def callback(self, button, interaction):
                                    pass

                            await interaction.message.edit(view = AddRole())

                        if select.values[0] == "remove_roles":
                            if not permission_data["roles"]:
                                await interaction.response.send_message(f"> Il n'y pour le moment aucun r√¥le √† retirer pour la **{'Perm' + original_permission}**.", ephemeral = True)
                                return
                            
                            await interaction.response.defer()
                            
                            roles_data = {}
                            guild_roles = await interaction.guild.fetch_roles()
                            guild_roles_ids = [role.id for role in guild_roles]
                            
                            for role_id in permission_data["roles"]:
                                if role_id not in guild_roles_ids:
                                    roles_data[str(role_id)] = "@R√¥leIntrouvable"
                                    continue
                                roles_data[str(role_id)] = "@" + guild_roles[guild_roles_ids.index(role_id)].name

                            
                            class RemoveRole(MyViewClass):
                                @discord.ui.select(
                                    placeholder = "Choisir des r√¥les",
                                    max_values = len(roles_data),
                                    options = [
                                        discord.SelectOption(label = role_name, value = role_id, description = f"Identifiant : {role_id}") for role_id, role_name in roles_data.items()
                                    ]
                                )
                                async def remove_role_callback(self, select, interaction):
                                    if interaction.user != ctx.author:
                                        await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                        return
                                    
                                    db = Database()
                                    await db.connect()

                                    permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                                    permission_data = permissions_data["authorizations"][original_permission]

                                    for role_id in select.values:
                                        if int(role_id) not in permission_data["roles"]:
                                            continue
                                        permission_data["roles"].remove(int(role_id))
                                    
                                    permissions_data["authorizations"][original_permission] = permission_data
                                    await db.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id =  interaction.guild.id)
                                    await interaction.response.defer()
                                    await interaction.message.edit(embed = await get_permission_embed(), view = previous_view)
                                    await db.disconnect()

                                @discord.ui.button(label = "Choisissez des r√¥les √† supprimer", disabled = True, style = discord.ButtonStyle.primary)
                                async def callback(self, button, interaction):
                                    pass

                            await interaction.message.edit(view = RemoveRole())

                        if select.values[0] == "add_users":
                            if len(permission_data["users"]) >= 15:
                                await interaction.response.send_message("> Vous ne pouvez pas ajouter plus de 15 utilisateurs.", ephemeral = True)
                                return
                            
                            await interaction.response.defer()
                            
                            class AddUsers(MyViewClass):
                                @discord.ui.select(
                                    placeholder = "Choisir un utilisateur",
                                    select_type = discord.ComponentType.user_select,
                                    max_values = 15 - len(permission_data["users"])
                                )
                                async def add_users_callback(self, select, interaction):
                                    if interaction.user != ctx.author:
                                        await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                        return
                                    
                                    db = Database()
                                    await db.connect()

                                    permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                                    permission_data = permissions_data["authorizations"][original_permission]

                                    for user in select.values:
                                        if (user.id in permission_data["users"]) or (len(permission_data["users"]) >= 15):
                                            continue
                                        for perm, perm_data in permissions_data["authorizations"].items(): # Faire en sorte √† ce que l'utilisateur ne soit nul par ailleurs.
                                            if user.id in perm_data["users"]:
                                                permissions_data["authorizations"][perm]["users"].remove(user.id)
                                        permission_data["users"].append(user.id)

                                    permissions_data["authorizations"][original_permission] = permission_data
                                    await db.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id =  interaction.guild.id)
                                    await interaction.response.defer()
                                    await interaction.message.edit(embed = await get_permission_embed(), view = previous_view)
                                    await db.disconnect()


                                @discord.ui.button(label = "Choisissez des utilisateurs √† ajouter", disabled = True, style = discord.ButtonStyle.primary)
                                async def callback(self, button, interaction):
                                    pass

                            await interaction.message.edit(view = AddUsers())

                        if select.values[0] == "remove_users":
                            if not permission_data["users"]:
                                await interaction.response.send_message("> Il n'y aucun utilisateur √† retirer.", ephemeral = True)
                                return
                            
                            usr = {}
                            for user_id in permission_data["users"]:
                                try:
                                    user = await bot.fetch_user(user_id)
                                    usr[str(user_id)] = user.display_name
                                except:
                                    usr[str(user_id)] = "UtilisateurIntrouvable"

                            
                            class RemoveUsers(MyViewClass):
                                @discord.ui.select(
                                    max_values = len(usr),
                                    placeholder = "Choisir des utilisateurs",
                                    options = [
                                        discord.SelectOption(label = user_name, value = user_id, description = "Identifiant : " + user_id) for user_id, user_name in usr.items()
                                    ]
                                )
                                async def remove_user_select(self, select, interaction):
                                    if interaction.user != ctx.author:
                                        await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                        return
                                    
                                    db = Database()
                                    await db.connect()
                                    permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                                    permission_data = permissions_data["authorizations"][original_permission]
                                    
                                    for user_id in select.values:
                                        if int(user_id) not in permission_data["users"]:
                                            continue
                                        permission_data["users"].remove(int(user_id))

                                    permissions_data["authorizations"][original_permission] = permission_data
                                    await db.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id = interaction.guild.id)
                                    await db.disconnect()

                                    await interaction.response.defer()
                                    await interaction.message.edit(embed = await get_permission_embed(), view = previous_view)


                                @discord.ui.button(label = "Choisissez des utilisateurs √† retirer", disabled = True, style = discord.ButtonStyle.primary)
                                async def callback(self, button, interaction):
                                    pass
                            
                            await interaction.response.defer()
                            await interaction.message.edit(view = RemoveUsers())

                        if select.values[0] == "manage_guildpermissions":
                            guildpermissions_translations = await bot.get_translation("permissions", interaction.guild.id)
                            
                            class ManageGuildPermissions(MyViewClass):
                                @discord.ui.select(
                                    placeholder = "Choisissez des permissions",
                                    max_values = len(guildpermissions),
                                    options = [
                                        discord.SelectOption(label = guildpermissions_translations[p], value = p) for p in guildpermissions
                                    ]
                                )
                                async def manage_perm_select_callback(self, select, interaction):
                                    if interaction.user != ctx.author:
                                        await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                        return
                                    
                                    db = Database()
                                    await db.connect()
                                    permissions_data = json.loads(await db.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                                    
                                    for guildperm in select.values:
                                        for perm, perm_data in permissions_data["authorizations"].items():
                                            if guildperm not in perm_data["guildpermissions"]:
                                                continue
                                            permissions_data["authorizations"][perm]["guildpermissions"].remove(guildperm)
                                    permissions_data["authorizations"][original_permission]["guildpermissions"] = select.values

                                    await db.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id = interaction.guild.id)
                                    await db.disconnect()

                                    await interaction.response.defer()
                                    await interaction.message.edit(embed = await get_permission_embed(), view = previous_view)


                                @discord.ui.button(label = "Choisssez les permissions qui seront autoris√©s", style = discord.ButtonStyle.primary, disabled = True)
                                async def callback(self, button, interaction):
                                    pass
                                
                            await interaction.message.edit(view = ManageGuildPermissions())
                            await interaction.response.defer()

                    @discord.ui.button(label = "Revenir en arri√®re", emoji = "‚Ü©")
                    async def comeback_button_callback(self, button, interaction):
                        if interaction.user != ctx.author:
                            await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                            return
                        
                        await interaction.response.defer()
                        await interaction.message.edit(view = choose_permission_view, embed = await get_main_embed())

                await interaction.response.defer()
                for option in select.options:
                    option.default = option.value == select.values[0]

                await interaction.message.edit(embed = await get_permission_embed(), view = EditPerm())


        await ctx.send(embed = await get_main_embed(), view = ConfigPerms())


    @commands.command(description = "Modifier les commandes par permission.")
    @commands.guild_only()
    async def switch(self, ctx):
        bot = self.bot # Pour pouvoir acc√©der √† l'instance du bot dans les callback des bouttons/select menus
        prefix = ctx.clean_prefix

        # ------------------ Commandes par cogs ({"cog": ["commands", "commands", "commands"]})
        cogs_to_commands = {}
        for cog in bot.cogs:
            cog_instance = bot.get_cog(cog)
            if (not cog_instance.get_commands()) or (getattr(cog_instance, "qualified_name") == "Developer"):
                continue
            cogs_to_commands[getattr(cog_instance, "qualified_name")] = [command.name for command in cog_instance.get_commands()]

        # ------------------ Charger les commandes r√©serv√©s aux propri√©ataire (qui ne peuvent pas donc √™tre d√©plac√©s)
        with open("gestion/private/data/default_perms.json") as file:
            data = json.load(file)
            buyer_commands = data["11"]

        
        # ------------------ Obtenir l'embed qui est affich√© au d√©but de la configuration
        async def get_switch_main_embed():
            database = Database()
            await database.connect()

            permissions_data = json.loads(await database.get_data("guild", "perms_hierarchic", guild_id = ctx.guild.id))
            permissions_to_commands = {}
            permissions_commands_text = ""

            for command_name, command_current_permission in permissions_data["commands"].items():
                permissions_to_commands[command_current_permission] = permissions_to_commands.get(command_current_permission, 0) + 1

            for permission_id, permission_commands_count in permissions_to_commands.items():
                permissions_commands_text += "\n"
                permissions_commands_text += f" - **{custom_names.get(permission_id, 'Perm' + permission_id)}** ({permission_commands_count})"

            embed = discord.Embed(
                title = "Choisissez une permission √† g√©rer",
                description = 
                "*Chaque commande doit appartenir √† une seule permission hi√©rarchique. Ainsi, lorsque vous d√©placez une commande d'une permission √† une autre, elle sera automatiquement retir√©e de sa permission pr√©c√©dente.*"
                + "\n\n- **__Permissions poss√©dants des commandes__**"
                + permissions_commands_text,
                color = await bot.get_theme(ctx.guild.id)
            )

            await database.disconnect()
            return embed


        # ------------------ Obtenir l'embed de permission pour une certaine permission
        async def get_permission_embed(perm : int):
            database = Database()
            await database.connect()

            permissions_data = json.loads(await database.get_data("guild", "perms_hierarchic", guild_id = ctx.guild.id))
            permission_commands = []

            for command_name, permission_number in permissions_data["commands"].items():
                if int(permission_number) == perm:
                    permission_commands.append(command_name)
            permission_commands = [
                f"**`{prefix}{command_name}`**" + (" (*non transf√©rable*)" if command_name in buyer_commands else "")
                for command_name in permission_commands
            ]
            permission_commands = "\n".join(permission_commands)
            
            embed = discord.Embed(
                title = custom_names.get(str(perm), "Permission n¬∞" + str(perm)),
                description = 
                "*Chaque commande doit appartenir √† une seule permission hi√©rarchique. Ainsi, lorsque vous d√©placez une commande d'une permission √† une autre, elle sera automatiquement retir√©e de sa permission pr√©c√©dente.*"
                + "\n\n"
                + "**__Commandes__**\n"
                + permission_commands if permission_commands else "*Aucune commande*",
                color = await bot.get_theme(ctx.guild.id)
            )

            await database.disconnect()
            return embed

        
        # ------------------ Classe discord.ui.View compos√© d'un select menu permettant de choisir une permission √† modifier
        class ChoosePermission(MyViewClass):
            @discord.ui.select(
                placeholder = "Choisir une permission",
                options = [
                    discord.SelectOption(
                        label = custom_names.get(str(i), "Perm" + str(i)),
                        value = str(i)
                    ) for i in range(12)
                ]
            )
            async def choose_permission_select_callback(self, select, interaction):
                if interaction.user != ctx.author:
                    await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                    return
                
                choose_permission_view = self # Sauvegarder la classe pour la restaurer plus tards si besoin
                original_permission = select.values[0]

                # ------------------ Classe discord.ui.View compos√© d'un select menu permettant de modifier les commandes d'une permission et d'un boutton permettant de revenir en arri√®re
                class EditPermissionCommands(MyViewClass):
                    @discord.ui.select(
                        placeholder = "Modifier la permission",
                        options = [
                            discord.SelectOption(label = "Importer des commandes", value = "import_commands", emoji = "üì•"),
                            discord.SelectOption(label = "Importer une permission",  value = "import_perm", emoji = "üì¨")
                        ]
                    )
                    async def edit_permission_commands_callback(self, select, interaction):
                        if interaction.user != ctx.author:
                            await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                            return
                        
                        await interaction.response.defer()
                        edit_permission_view = self # Sauvegarde du menu de configuration de la permission pour la restaurer plus tards quand l'utilisatreur aura compl√©t√© son action
                        
                        # ------------------ Importer des commandes ------------------
                        if select.values[0] == "import_commands":
                            # Choisir une cat√©gorie
                            class ChooseCategory(MyViewClass):
                                @discord.ui.select(
                                    placeholder = "Choisir une cat√©gorie",
                                    options = [
                                        discord.SelectOption(label = cog_name.replace("_", " "), value = cog_name)
                                        for cog_name, cog_commands in cogs_to_commands.items() if cog_name != "Proprietaire"
                                    ]
                                )
                                async def choose_category_select(self, select, interaction):
                                    if interaction.user != ctx.author:
                                        await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                        return
                                    
                                    
                                    # Choisir une commande
                                    class ChooseCommand(MyViewClass):
                                        @discord.ui.select(
                                            placeholder = "Choisir une commande",
                                            max_values = len(cogs_to_commands[select.values[0]]),
                                            options = [
                                                discord.SelectOption(label = f"{prefix}{command}", value = command)
                                                for command in cogs_to_commands[select.values[0]]
                                            ]
                                        )
                                        async def choose_command_select_callback(self, select, interaction):
                                            if interaction.user != ctx.author:
                                                await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                                return
                                            
                                            database = Database()
                                            await database.connect()
                                            permissions_data = json.loads(await database.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                                            if original_permission == "0":
                                                commands_not_added = []
                                                
                                                with open("gestion/private/data/default_perms.json") as file:
                                                    data = json.load(file)

                                                # Pour des raisons de s√©curit√©e, on emp√™che l'ajout des commandes par d√©faut n'√©tant pas public vers la permission public.
                                                for command_name in select.values:
                                                    if command_name not in data["0"]: commands_not_added.append(command_name)
                                                    else: permissions_data["commands"][command_name] = "0"

                                                if commands_not_added:
                                                    await interaction.response.send_message(
                                                        "Votre permission a √©t√© mise √† jours, mais pour des raisons de s√©curit√©s, les commandes suivantes n'ont pas √©t√© transf√©r√©es vers la permission Public :"
                                                        + "\n"
                                                        + "\n".join([f"`{prefix}{command}`" for command in commands_not_added]),
                                                        ephemeral = True
                                                    )
                                                else: await interaction.response.defer()
                                                await database.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id = interaction.guild.id)
                                                await interaction.message.edit(view = edit_permission_view, embed = await get_permission_embed(int(original_permission)))
                                                await database.disconnect()
                                                return
                                            
                                            for command_name in select.values:
                                                permissions_data["commands"][command_name] = original_permission

                                            await database.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id = interaction.guild.id)
                                            await interaction.response.defer()
                                            await interaction.message.edit(view = edit_permission_view, embed = await get_permission_embed(int(original_permission)))

                                            await database.disconnect()
                                            

                                        @discord.ui.button(label = "Choisissez les commandes √† transf√©rer", style = discord.ButtonStyle.primary, disabled = True)
                                        async def callback(self, button, interaction):
                                            pass
                                    
                                    await interaction.response.defer()
                                    await interaction.message.edit(view = ChooseCommand())

                                @discord.ui.button(label = "Choisissez une cat√©gorie de commande", style = discord.ButtonStyle.primary, disabled = True)
                                async def callback(self, button, interaction):
                                    pass

                            await interaction.message.edit(view = ChooseCategory(timeout = 300))

                        # ------------------ Importer toutes les commandes d'une permission ------------------
                        if select.values[0] == "import_perm":
                            if original_permission == "0":
                                await interaction.response.send_message("> Vous ne pouvez pas importer de permissions vers la permission publique.", ephemeral = True)
                                return
                            
                            class ChoosePermission(MyViewClass):
                                @discord.ui.select(
                                    placeholder = "Choisir une permission",
                                    options = [
                                        discord.SelectOption(label = custom_names.get(str(i), "Perm" + str(i)), value = str(i))
                                        for i in range(11) if str(i) != original_permission
                                    ]
                                )
                                async def choose_permission_callback(self, select, interaction):
                                    if interaction.user != ctx.author:
                                        await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                                        return
                                    
                                    database = Database()
                                    await database.connect()
                                    
                                    permissions_data = json.loads(await database.get_data("guild", "perms_hierarchic", guild_id = interaction.guild.id))
                                    for command_name, command_current_permission in permissions_data["commands"].items():
                                        if command_current_permission != select.values[0]:
                                            continue
                                        permissions_data["commands"][command_name] = original_permission

                                    await database.set_data("guild", "perms_hierarchic", json.dumps(permissions_data), guild_id = interaction.guild.id)
                                    await interaction.response.defer()
                                    await interaction.message.edit(embed = get_permission_embed(int(original_permission)), view = edit_permission_view)
                                    await database.disconnect()

                                @discord.ui.button(label = "Choisissez une permission √† importer", style = discord.ButtonStyle.primary, disabled = True)
                                async def callback(self, button, interaction):
                                    pass
                            
                            await interaction.message.edit(view = ChoosePermission())


                    @discord.ui.button(label = "Revenir en arri√®re", emoji = "‚Ü©")
                    async def comback_switch_main_button(self, button, interaction):
                        if interaction.user != ctx.author:
                            await interaction.response.send_message("> Vous n'√™tes pas autoris√©s √† int√©ragir avec ceci.", ephemeral = True)
                            return
                        
                        await interaction.response.defer()
                        await interaction.message.edit(embed = await get_switch_main_embed(), view = choose_permission_view)


                await interaction.response.defer()
                await interaction.message.edit(embed = await get_permission_embed(int(select.values[0])), view = EditPermissionCommands(timeout = 300))
                

        await ctx.send(embed = await get_switch_main_embed(), view = ChoosePermission(timeout = 300))




    @commands.command(description = "Voir vos commandes par permissions hi√©rarchiques")
    @commands.guild_only()
    async def helpall(self, ctx):
        perms_manager = PermissionsManager()
        paginator_creator = PaginatorCreator()

        prefix = await self.bot.get_prefix(ctx.message)
        descriptions = []
        for index in range(12):
            commands = await perms_manager.get_perm_commands(ctx.guild.id, index)
            if commands:
                descriptions.append(
                    f"*Utilisez des espaces pour s√©parer vos arguments, mettez les entre guillemets `\"\"` si vos arguments comportent des espaces. "
                    + "Les arguments sous forme `<...>` sont obligatoires, tandis que les arguments sous forme `[...]` sont facultatifs.*\n\n"
                    + "**__" + custom_names.get(str(index), f"Perm{index}") + "__**" + "\n"
                    + "**`" + "`**\n**`".join([f"{prefix}{command}" for command in commands]) + "`**"
                )

        paginator = await paginator_creator.create_paginator(
            title = "Commandes par permission",
            data_list = descriptions,
            data_per_page = 1,
            embed_color = await self.bot.get_theme(ctx.guild.id),
            pages_looped = True
        )

        await paginator.send(ctx)
        

    @commands.command(description = "Voir vos permissions personnalis√©es")
    @commands.guild_only()
    async def customperms(self, ctx):
        ...

    
    

    


def setup(bot):
    bot.add_cog(Gestion_des_Permissions(bot))