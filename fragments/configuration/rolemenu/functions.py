import discord
from typing import List


async def get_main_embed(bot, ctx, data = None) -> discord.Embed:
    """
    Fonction permettant d'obtenir l'embed de d√©part
    """
    if not data:
        data = {"buttons": [], "selectors": []}

    embed = discord.Embed(
        title = "Configuration de boutons/s√©l√©cteurs √† r√¥le",
        description = "*Un s√©l√©cteur compte comme 5 boutons. Discord vous limites √† maximum 25 boutons par message.*"
        + "\n\n"
        + f"> *Votre nombre de bouton :* ***{len(data['buttons'])}***\n"
        + f"> *Votre nombre de s√©l√©cteur :* ***{len(data['selectors'])}***",
        color = await bot.get_theme(ctx.guild.id),
        thumbnail = discord.EmbedMedia(url = ctx.guild.icon.url) if ctx.guild.icon else None
    )
    return embed


def get_role_menu_select_options(data) -> List[discord.SelectOption]:
    """
    Fonction permettant d'obtenir une liste des options du s√©l√©cteur permettant de choisir un bouton/s√©l√©cteur √† configurer
    """
    options = []
    
    for selector in data["selectors"]:
        configured = sum([1 for option_data in selector["options_data"] if option_data["role"]])
        options.append(discord.SelectOption(label = f"S√©l√©cteur - {selector['id']}", emoji = "üë•", description = f"R√¥le(s) d√©fini : {str(configured) + '/' + str(len(selector['options_data'])) if selector['options_data'] else 'Aucun'}", value = "selector_" + selector["id"]))
    
    for button in data["buttons"]:
        options.append(discord.SelectOption(label = f"Bouton - {button['id']}", emoji = "üë§", description = "R√¥le d√©fini" if button["role"] else "R√¥le non d√©fini", value = "button_" + button['id']))

    if not options:
        return [discord.SelectOption(label = "Aucun bouton/s√©l√©cteur", default = True, value = "nope")]
    return options


async def get_button_embed(button_data, ctx, bot) -> discord.Embed:
    """
    Fonction permettant d'obtenir l'embed de configuration d'un bouton du rolemenu
    """
    embed = discord.Embed(
        title = f"Bouton - {button_data['id']}",
        color = await bot.get_theme(ctx.guild.id)
    )

    embed.add_field(name = "Texte", value = button_data["label"])
    embed.add_field(name = "Emoji", value = button_data["emoji"] if button_data["emoji"] else "*Aucun emoji*")
    embed.add_field(name = "Couleur", value = button_data["color"].capitalize())
    embed.add_field(name = "R√¥le", value = f"<@&{button_data['role']}>" if button_data['role'] else "*Aucun r√¥le (obligatoire)*")
    embed.add_field(name = "R√¥le requis", value = f"<@&{button_data['required_role']}>" if button_data['required_role'] else "*Aucun r√¥le*")
    embed.add_field(name = "R√¥le ignor√©", value = f"<@&{button_data['ignored_role']}>" if button_data['ignored_role'] else "*Aucun r√¥le*")
    
    return embed


async def get_selector_embed(selector_data, ctx, bot) -> discord.Embed:
    """
    Fonction permettant d'obtenir l'embed de configuration d'un s√©l√©cteur du rolemenu
    """
    embed = discord.Embed(
        title = f"S√©l√©cteur - {selector_data['id']}",
        color = await bot.get_theme(ctx.guild.id)
    )

    embed.add_field(name = "Texte du s√©l√©cteur", value = selector_data["placeholder"])
    embed.add_field(name = f"R√¥le{('s' if selector_data['min_values'] > 1 else '')} minimum", value = str(selector_data['min_values']))
    embed.add_field(name = f"R√¥le{('s' if selector_data['max_values'] > 1 else '')} maximum", value = str(selector_data['max_values']))
    embed.add_field(name = f"Nombre d'option{('s' if len(selector_data['options_data']) > 1 else '')}", value = str(len(selector_data['options_data'])))

    return embed


def get_formated_selector_options(options_data) -> List[discord.SelectOption]:
    """
    Fonction permettant d'obtenir une liste des options d'un s√©l√©cteur que le configurateur a configur√©
    """

    options = []
    for option in options_data:
        options.append(
            discord.SelectOption(
                label = option["label"],
                emoji = option["emoji"],
                description = option["description"],
                value = "selector_option_" + option["label"]
            )
        )
    
    if not options:
        return [discord.SelectOption(label = "Aucune option configur√©e", value = "nope", default = True)]
    return options